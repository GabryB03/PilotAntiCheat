<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Reloaded.Memory.Sigscan.Definitions</name>
    </assembly>
    <members>
        <member name="T:Reloaded.Memory.Sigscan.Definitions.IScanner">
            <summary>
            Represents an individual scanner that can be used to scan for byte patterns.
            </summary>
        </member>
        <member name="M:Reloaded.Memory.Sigscan.Definitions.IScanner.FindPattern(System.String)">
            <summary>
            Attempts to find a given pattern inside the memory region this class was created with.
            The method used depends on the available hardware; will use vectorized instructions if available.
            </summary>
            <param name="pattern">
                The pattern to look for inside the given region.
                Example: "11 22 33 ?? 55".
                Key: ?? represents a byte that should be ignored, anything else if a hex byte. i.e. 11 represents 0x11, 1F represents 0x1F
            </param>
            <returns>A result indicating an offset (if found) of the pattern.</returns>
        </member>
        <member name="M:Reloaded.Memory.Sigscan.Definitions.IScanner.FindPattern(System.String,System.Int32)">
            <summary>
            Attempts to find a given pattern inside the memory region this class was created with.
            The method used depends on the available hardware; will use vectorized instructions if available.
            </summary>
            <param name="pattern">
                The pattern to look for inside the given region.
                Example: "11 22 33 ?? 55".
                Key: ?? represents a byte that should be ignored, anything else if a hex byte. i.e. 11 represents 0x11, 1F represents 0x1F
            </param>
            <param name="offset">Offset (in bytes) from which the pattern scan should begin from.</param>
            <returns>A result indicating an offset (if found) of the pattern.</returns>
        </member>
        <member name="M:Reloaded.Memory.Sigscan.Definitions.IScanner.FindPatterns(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)">
            <summary>
            Finds multiple patterns within a given scan range, in multithreaded fashion.
            </summary>
            <param name="patterns">The patterns to scan.</param>
            <param name="loadBalance">True to use load balancing. Optimal with many patterns (64+) of variable length.</param>
            <returns>Results of the scan.</returns>
        </member>
        <member name="M:Reloaded.Memory.Sigscan.Definitions.IScanner.FindPatternsCached(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)">
            <summary>
            Finds multiple patterns within a given scan range, in multithreaded fashion.
            This implementation guards against scanning duplicates, at negligible speed expense.
            </summary>
            <param name="patterns">The patterns to scan.</param>
            <param name="loadBalance">True to use load balancing. Optimal with many patterns (64+) of variable length.</param>
            <returns>Results of the scan.</returns>
        </member>
        <member name="M:Reloaded.Memory.Sigscan.Definitions.IScanner.FindPattern_Compiled(System.String)">
            <summary>
            Attempts to find a given pattern inside the memory region this class was created with.
            This method generates a list of instructions, which specify a set of bytes and mask to check against.
            It is fairly performant on 64-bit systems but not much faster than the simple implementation on 32-bit systems.
            </summary>
            <param name="pattern">
                The pattern to look for inside the given region.
                Example: "11 22 33 ?? 55".
                Key: ?? represents a byte that should be ignored, anything else if a hex byte. i.e. 11 represents 0x11, 1F represents 0x1F
            </param>
            <returns>A result indicating an offset (if found) of the pattern.</returns>
        </member>
        <member name="M:Reloaded.Memory.Sigscan.Definitions.IScanner.FindPattern_Simple(System.String)">
            <summary>
            Attempts to find a given pattern inside the memory region this class was created with.
            This method uses the simple search, which simply iterates over all bytes, reading max 1 byte at once.
            This method generally works better when the expected offset is smaller than 4096.
            </summary>
            <param name="pattern">
                The pattern to look for inside the given region.
                Example: "11 22 33 ?? 55".
                Key: ?? represents a byte that should be ignored, anything else if a hex byte. i.e. 11 represents 0x11, 1F represents 0x1F
            </param>
            <returns>A result indicating an offset (if found) of the pattern.</returns>
        </member>
        <member name="T:Reloaded.Memory.Sigscan.Definitions.IScannerFactory">
            <summary>
            Represents a factory for creating scanner instances.
            </summary>
        </member>
        <member name="M:Reloaded.Memory.Sigscan.Definitions.IScannerFactory.CreateScanner(System.Byte[])">
            <summary>
            Creates a signature scanner given the data in which patterns are to be found.
            </summary>
            <param name="data">The data to look for signatures inside.</param>
        </member>
        <member name="M:Reloaded.Memory.Sigscan.Definitions.IScannerFactory.CreateScanner(System.Diagnostics.Process)">
            <summary>
            Creates a signature scanner given a process.
            The scanner will be initialised to scan the main module of the process.
            </summary>
            <param name="process">The process from which to scan patterns in. (Not Null)</param>
        </member>
        <member name="M:Reloaded.Memory.Sigscan.Definitions.IScannerFactory.CreateScanner(System.Diagnostics.Process,System.Diagnostics.ProcessModule)">
            <summary>
            Creates a signature scanner given a process and a module (EXE/DLL)
            from which the signatures are to be found.
            </summary>
            <param name="process">The process from which to scan patterns in. (Not Null)</param>
            <param name="module">An individual module of the given process, which denotes the start and end of memory region scanned.</param>
        </member>
        <member name="M:Reloaded.Memory.Sigscan.Definitions.IScannerFactory.CreateScanner(System.Byte*,System.Int32)">
            <summary>
            Creates a signature scanner given the data in which patterns are to be found.
            </summary>
            <param name="data">The data to look for signatures inside.</param>
            <param name="length">The length of the data.</param>
        </member>
        <member name="T:Reloaded.Memory.Sigscan.Definitions.Structs.PatternScanResult">
            <summary />
        </member>
        <member name="P:Reloaded.Memory.Sigscan.Definitions.Structs.PatternScanResult.Offset">
            <summary>
            The offset of the pattern if found, else -1.
            </summary>
        </member>
        <member name="P:Reloaded.Memory.Sigscan.Definitions.Structs.PatternScanResult.Found">
            <summary>
            True if the pattern has been found, else false.
            </summary>
        </member>
        <member name="M:Reloaded.Memory.Sigscan.Definitions.Structs.PatternScanResult.#ctor(System.Int32)">
            <summary>
            Creates a pattern scan result given the offset of the pattern.
            </summary>
            <param name="offset">The offset of the pattern if found. -1 if not found.</param>
        </member>
        <member name="M:Reloaded.Memory.Sigscan.Definitions.Structs.PatternScanResult.AddOffset(System.Int32)">
            <summary>
            Appends to the existing offset if the offset is valid.
            </summary>
        </member>
        <member name="M:Reloaded.Memory.Sigscan.Definitions.Structs.PatternScanResult.Equals(Reloaded.Memory.Sigscan.Definitions.Structs.PatternScanResult)">
            <summary/>
        </member>
        <member name="M:Reloaded.Memory.Sigscan.Definitions.Structs.PatternScanResult.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Reloaded.Memory.Sigscan.Definitions.Structs.PatternScanResult.GetHashCode">
            <inheritdoc />
        </member>
    </members>
</doc>
